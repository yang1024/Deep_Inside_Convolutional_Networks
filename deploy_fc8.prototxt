name: "CaffeNet"
input: "data"
input_dim: 1  # 一批的数量（bach of image ）
input_dim: 3  #通道数量（channels 彩色图是3通道RGB）
input_dim: 227  #图像的高度（height）
input_dim: 227  #图像的宽度（weight）

force_backward: true

layer {
  name: "conv1"         #层的名称
  type: "Convolution"   # 层的类型
  bottom: "data"    #层的输入（主要是对应上面的data）
  top: "conv1"      #层的输出（对应的是本层卷积的结果） 
  convolution_param {   #卷积的参数
    num_output: 96      #过滤器的个数  可以看做的是卷积核的个数
    kernel_size: 11     #卷积核的大小
    stride: 4           #图像中的间隔多少进行卷积（滤波器窗口滑动的步长）
  }
}
layer {
  name: "relu1"
  type: "ReLU"    #激活函数
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX     #使用最大池化
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "norm1"
  type: "LRN"   #Local Response Normalization (LRN) (侧抑制)
  bottom: "pool1"
  top: "norm1"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "norm1"
  top: "conv2"
  convolution_param {
    num_output: 256
    pad: 2        #边界填充，补2个行和2个列
    kernel_size: 5
    group: 2      #卷积分组（补，最下面的解释）
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "norm2"
  type: "LRN"
  bottom: "pool2"
  top: "norm2"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "norm2"
  top: "conv3"
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}
layer {
  name: "conv4"
  type: "Convolution"
  bottom: "conv3"
  top: "conv4"
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    group: 2
  }
}
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "conv4"
  top: "conv4"
}
layer {
  name: "conv5"
  type: "Convolution"
  bottom: "conv4"
  top: "conv5"
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    group: 2
  }
}
layer {
  name: "relu5"
  type: "ReLU"
  bottom: "conv5"
  top: "conv5"
}
layer {
  name: "pool5"
  type: "Pooling"
  bottom: "conv5"
  top: "pool5"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "fc6"
  type: "InnerProduct"
  bottom: "pool5"
  top: "fc6"
  inner_product_param {
    num_output: 4096
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6"
  top: "fc6"
}
layer {
  name: "drop6"
  type: "Dropout"
  bottom: "fc6"
  top: "fc6"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7"
  type: "InnerProduct"
  bottom: "fc6"
  top: "fc7"
  inner_product_param {
    num_output: 4096
  }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "fc7"
  top: "fc7"
}
layer {
  name: "drop7"
  type: "Dropout"
  bottom: "fc7"
  top: "fc7"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc8"
  type: "InnerProduct"   #内积（全连接层）
  bottom: "fc7"
  top: "fc8"
  inner_product_param {
    num_output: 1000     #输出的个数
  }
}

#卷积时每个input（feature map）需要和每一个kernel都进行连接，但是由于分组的原因input只是与部分的kernel进行连接。
